#!/usr/bin/env python3

import json
import locale
import sys
import emails
import os
import reports
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
styles = getSampleStyleSheet()

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


"""0: sales, 1: carMake carModel (carYear)"""
mostSalesCar=[0,""]

mostPopYear={}

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item['total_sales']>mostSalesCar[0]:
      mostSalesCar[0]=item['total_sales']
      mostSalesCar[1]=item['car']['car_make']+" "+item['car']['car_model']+" ("+str(item['car']['car_year'])+")"
    if item['car']['car_year'] in  mostPopYear.keys():
      mostPopYear[item['car']['car_year']]+=item['total_sales']
    else:
      mostPopYear[item['car']['car_year']]=item['total_sales']
  
    # TODO: also handle most popular car_year

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
  ]
  summary.append("The {} had the most sales: {}".format(mostSalesCar[1], mostSalesCar[0]))
  popYearKey= max(mostPopYear, key=mostPopYear.get)
  summary.append("The most popular year was {} with {} sales.".format(popYearKey,mostPopYear[popYearKey]))

  return summary



def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  report = SimpleDocTemplate("/tmp/cars.pdf")
  reportSum= '<br/>'.join(summary)
  reportSumParagraph= Paragraph(reportSum)
  reportTitle= Paragraph("Sales summary for last month", styles['h1'])

  table_data=[['ID', 'Car', 'Price', 'Total Sales']]
  for x in data:
    carInfo=[]
    carInfo.append(x['id'])
    carInfo.append(x['car']['car_make']+" "+x['car']['car_model']+" ("+str(x['car']['car_year']))
    carInfo.append(x['price'])
    carInfo.append(x['total_sales'])
    table_data.append(carInfo)

  report_table = Table(data=table_data)
 # report.build([reportTitle, reportSumParagraph, report_table])
  reports.generate("/tmp/cars.pdf", "Sales summary for last month",reportSum , table_data)       

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
